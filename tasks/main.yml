- name: Update repositories cache (--extra-vars="forceupdate=true" if newer than 1 day)
  become: true
  apt:
    update_cache: yes
    # one day
    cache_valid_time:  "{{ (forceupdate | bool ) | ternary('0','86400') }}"

- name: Check whether there are packages available to be installed/upgraded
  command: apt list --upgradable
  changed_when: false
  register: packages
- name: Output updateable packages
  when: "packages.stdout != 'Listing...' and packages.stdout != 'Auflistung...'"
  changed_when: true
  debug:
    var: packages.stdout_lines
  register: updateavailable

- name: Unhold package from upgrading
  with_items: "{{ forceupgrade_packages }}"
  when: item in packages.stdout_lines
  become: true
  command: "apt-mark unhold {{ item }}"
  register: unholditem
  changed_when: "unholditem.stdout == 'Canceled hold on ' + item + '.' or unholditem.stdout == 'Halten-Markierung f√ºr ' + item + ' entfernt.'"
- name: Upgrade forceupgrade_packages
  become: true
  apt:
    name: "{{ forceupgrade_packages }}"
    state: latest
    only_upgrade: yes
    dpkg_options: "{{ forceupgrade_dpkg_options }}"
- name: Hold package from upgrading
  with_items: "{{ forceupgrade_packages }}"
  become: true
  command: "apt-mark hold {{ item }}"
  register: holditem
  changed_when: "holditem.stdout == item + ' set on hold.' or holditem.stdout == item + ' auf Halten gesetzt.'"

- name: Ensure holdpackage is a list
  set_fact:
    holdpackage: "{{ [holdpackage] }}"
  when: (holdpackage | type_debug) == 'unicode'

- name: Check manually held packages (heldpackages.stdout_lines == holdpackage)
  tags: upgrade
  command: apt-mark showhold
  register: heldpackages
  changed_when: false
  failed_when: "holdpackage is defined and holdpackage is not subset(heldpackages.stdout_lines)"

- name: Output manually held packages
  when: "holdpackage is defined and not heldpackages.stdout or holdpackage is defined and heldpackages.stdout and heldpackages.stdout_lines != holdpackage"
#  changed_when: true
  debug:
    var: heldpackages.stdout_lines

- name: Record heldpackages as custom stat (set show_custom_stats in ansible.cfg or ANSIBLE_SHOW_CUSTOM_STATS=yes in env)
  set_stats:
    per_host: yes
    data:
      heldpackages: "{{ heldpackages.stdout_lines }}"

- name: dist-upgrade packages (--extra-vars="upgrade=true")
  tags: upgrade
  become: true
  when: upgrade | bool and (packages is not defined or updateavailable.changed)
  register: upgraded
  apt:
    upgrade: dist
- name: show upgraded
  tags: upgrade
  when: upgrade | bool and upgraded.changed
  debug:
    msg: "{{ upgraded.stdout_lines }}"

- name: Autoremove
  tags: cleanup
  become: true
  apt:
    autoremove: yes
- name: Autoclean
  tags: cleanup
  become: true
  apt:
    autoclean: yes

- name: Reboot is required if changed
  tags: reboot
  stat:
    path: /var/run/reboot-required
    get_md5: no
  register: rebootrequired
  changed_when: rebootrequired.stat.exists

- name: Record rebootrequired as custom stat (set show_custom_stats in ansible.cfg or ANSIBLE_SHOW_CUSTOM_STATS=yes in env)
  set_stats:
    per_host: yes
    data:
      rebootnecessary: "{{ rebootrequired.stat.exists }}"

- name: Reboot (--extra-vars="reboot=true")
  tags: reboot
  when: reboot | bool and rebootrequired.stat.exists
  become: true
  reboot:
    connect_timeout: 10
    reboot_timeout: 5
  ignore_errors: yes
  register: reboot_result
- name: reboot result
  tags: reboot
  when: reboot | bool and reboot_result is defined and (reboot_result.skipped is not defined or not reboot_result.skipped)
  debug:
    msg: "{{ reboot_result }}"
- name: wait for connection
  tags: reboot
  when: reboot | bool and reboot_result is defined and (reboot_result.skipped is not defined or not reboot_result.skipped)
  wait_for_connection:
    delay: 3
    timeout: 120
