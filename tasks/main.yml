- name: Update repositories cache (--extra-vars="forceupdate=true")
  become: true
  apt:
    update_cache: yes
    # one day
    cache_valid_time:  "{{ (forceupdate | bool == true) | ternary('0','86400') }}"

- name: Check whether there are packages available to be installed/upgraded
  command: apt list --upgradable
  changed_when: false
  register: packages
- name: Output updateable packages
  when: "packages.stdout != 'Listing...' and packages.stdout != 'Auflistung...'"
  changed_when: true
  debug:
    var: packages.stdout_lines

- name: Check manually held packages
  command: apt-mark showhold
  register: heldpackages
  changed_when: false
  failed_when: "holdpackage is defined and heldpackages.stdout_lines|join(',')  != holdpackage"
- name: Output manually held packages
  when: "heldpackages.stdout == '' and holdpackage is defined or heldpackages.stdout != '' and holdpackage is defined and heldpackages.stdout_lines|join(',')  != holdpackage"
  changed_when: true
  debug:
    var: heldpackages.stdout_lines

- name: dist-upgrade packages (--extra-vars="upgrade=true")
  become: true
  when: upgrade | bool
  register: upgraded
  apt:
    upgrade: dist

- name: show upgraded
  when: upgrade | bool
  debug:
    msg: "{{upgraded.stdout_lines}}"

- name: Autoremove
  become: true
  apt:
    autoremove: yes
- name: Autoclean
  become: true
  apt:
    autoclean: yes

- name: Reboot is required if changed
  stat:
    path: /var/run/reboot-required
    get_md5: no
  register: rebootrequired
  changed_when: "rebootrequired.stat.exists == true"

- name: Reboot (--extra-vars="reboot=true")
  when: reboot | bool == true and rebootrequired.stat.exists == true
  become: true
  reboot:
    connect_timeout: 10
    reboot_timeout: 30
  register: reboot_result
- name: reboot result
  when: reboot_result is defined and reboot_result.skipped != true
  debug:
    msg: "{{reboot_result}}"
